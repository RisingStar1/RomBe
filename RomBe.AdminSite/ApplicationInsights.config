<?xml version="1.0" encoding="utf-8"?>
<ApplicationInsights xmlns="http://schemas.microsoft.com/ApplicationInsights/2013/Settings">
  <ActiveProfile>Production</ActiveProfile>
  <DebugBuildProfile>Development</DebugBuildProfile>
  <Profiles>
    <!-- Learn more about Application Insights configuration with ApplicationInsights.config here: 
             http://go.microsoft.com/fwlink/?LinkID=392530
        
             Settings defined under <Defaults> are merged with their overrides specified under active <Profile> element 
             You can select which profile is active by using <ActiveProfile> element. If this element is missing, default settings 
             are used. 
             
             The <DebugBuildProfile> element defines the profile that will be used when a debug version of the application is built
             within Visual Studio. -->
    <Defaults>
      <!-- Application Insights component settings -->
      <ComponentSettings>
        <!-- Account id is used to uniquely identify your Application Insights account. -->
        <AccountID>d411bd80-9f31-41a9-9df9-82a0d95a6f14</AccountID>
        <!-- Security key that ensures that nobody else can send data to your Application Insights account on your behalf. -->
        <LicenseKey>552+tIpAxHtG37cvByW55EyoiGKrCHbuDblKIdtVGCJpynJOjDPXGGX0j4JC8hwiM4xQEPY+AMov7ZnKeTxN9g==</LicenseKey>
        <!-- A unique identifier of the application component in Application Insights. It is used to differentiate data sent 
                     by different components and from different applications. -->
        <ComponentID>18b5e7f4-0050-4f4d-96e8-472d76713c4c</ComponentID>
        <!-- A name under which your monitored application component is displayed in the Application Insights -->
        <ComponentName>RomBe.AdminSite</ComponentName>
      </ComponentSettings>
      <!-- <MMAOutputChannels> controls where Microsoft Monitoring Agent sends its collected metrics -->
      <MMAOutputChannels>
        <!-- Controls MMA output channel for Application Insights -->
        <ApplicationInsights enabled="true" />
      </MMAOutputChannels>
      <!-- <APMSettings> controls configuration of application performance and reliability monitoring -->
      <APMSettings>
        <!-- Microsoft Monitoring Agent measures the execution time of your application's entry points (top-level functions.)
                     If an entry point takes longer to execute than the PerformanceThreshold, then the Agent will 
                     log a performance event. 
                     If the threshold is not exceeded, then the agent discards the measurement.
                     The default threshold is 5000 milliseconds (5 seconds). In many modern applications that have very 
                     quick request times, you might want to lower this to match your application component's performance 
                     expectation or service level agreement. -->
        <PerformanceThreshold>5000</PerformanceThreshold>
        <!-- When MMA reports a performance event, the data it sends shows the internal execution tree, 
                     so that you can identify where the time was spent. 
                     However, method calls that take less than the SensitivityThreshold are omitted from the tree. 
                     If you reduce this threshold, the collected data will be bigger, with a possible impact 
                     on your application's performance. -->
        <SensitivityThreshold>100</SensitivityThreshold>
        <!-- Namespaces to be instrumented for application performance monitoring.
                     The execution tree that is logged in a performance event will include only methods in the specified namespaces.
                     (You can add specific methods in other namespaces in <Resources>.)
    
                     [All Namespaces] = Include most namespaces, but not Microsoft.*, System.* and some others.
	                 Fabrikam.Web;Fabrikam.IceCream;... = Include just the specified namespaces. -->
        <Namespaces>[All Namespaces]</Namespaces>
        <!-- Additional entry points to monitor. 
                     By default, the Agent monitors calls into your application from the ASP.NET framework. 
                     You can add other methods, for example if you want to monitor an asynchronous task. 
                     Format: Namespace.ClassName.MethodName;... -->
        <EntryPoints></EntryPoints>
        <!-- Methods for which to collect call parameter values. 
                     Normally the execution tree includes only the names of the called methods. 
                     Methods in this list will include parameter values. 
                     For example, if some searches take a long time, include your search method in this list, 
                     so that you can see what term the user was searching for.
                     Methods in this list are logged even if they are not in an included namespace.
                     Format: Namespace.ClassName.MethodName;... -->
        <Resources></Resources>
        <!-- Specify whether to log caught exceptions.
                     false = Log exceptions that are handled by the standard ASP.NET handlers,
                             and by your handlers specified in <ExceptionHandlers>.
                     true =  Log all exceptions in the instrumented namespaces that cross a method boundary. -->
        <EnableAllExceptions>true</EnableAllExceptions>
        <!-- A semicolon delimited list of namespaces and methods for which detailed information is 
                     tracked when monitoring application failures. 
                     [All Namespaces] = most namespaces except Microsoft.*, System.*
                     Namespace1;Namespace2; ... = include only the specified namespaces. -->
        <ExceptionTracking>[All Namespaces]</ExceptionTracking>
        <!-- When EnableAllExceptions=false, log exceptions that are handled by the methods in this list,
                     in addition to the standard ASP.NET error handlers.
                     Format: Namespace.ClassName.MethodName;... -->
        <ExceptionHandlers></ExceptionHandlers>
      </APMSettings>
      <!-- Memory events can be used to detect runaway .NET memory use in ASP.NET applications, which is typically
                 caused by memory leaks. Settings for memory events and memory snapshots are defined in this section. -->
      <MemoryEventSettings enabled="true">
        <!-- Memory events and snapshots are created when an ASP.NET application reaches one of the enabled triggers. -->
        <Triggers>
          <!-- If a non-zero limit is set in the [memory] property of the IIS application pool 
                         (http://technet.microsoft.com/library/cc745955.aspx), a memory event and snapshot will be created
                         when the virtual memory used by a worker process reaches the following percentage
                         of the limit. -->
          <IISRecycleVirtualBytesPercentage enabled="true">90</IISRecycleVirtualBytesPercentage>
          <!-- If a non-zero limit is set in the [privateMemory] property of the IIS application pool, 
                         a memory event and snapshot will be created when the the private memory of a worker 
                         process reaches the following percentage of the limit. -->
          <IISRecyclePrivateBytesPercentage enabled="true">90</IISRecyclePrivateBytesPercentage>
          <!-- A memory event and snapshot will be created when the private memory used by a worker process reaches an
                         absolute value or the specified percentage of the total memory (RAM) on the computer. 
                         Some examples:
                            <PrivateBytes enabled="true" unit="percent">50</PrivateBytes>
                            <PrivateBytes enabled="true" unit="MB">500</PrivateBytes>
                            <PrivateBytes enabled="true" unit="GB">2.5</PrivateBytes> -->
          <PrivateBytes enabled="true" unit="percent">50</PrivateBytes>
        </Triggers>
        <!-- When a memory event occurs, a memory snapshot is always created. 
                     The settings in this section control additional memory snapshot settings. -->
        <Snapshots>
          <!-- By default, memory snapshots will be uploaded to Application Insights. Set this 
                         false to keep memory snapshots on the computer where the memory event occurred. -->
          <UploadToAzure>true</UploadToAzure>
          <!-- A memory baseline is a snapshot that is taken at a lower threshold than a memory event. 
                         If an event occurs, you can compare it with the baseline to see which objects are using up the memory.
                         If a memory baseline exists when a memory event occurs, it will be included with the memory snapshot. 
                         When you inspect the snapshot in Visual Studio, you'll be able to see the comparison.-->
          <Baselines>
            <!-- A baseline will be created when the app pool process's private bytes used 
                             reaches an absolute value or the specified percentage of the total memory (RAM) on the computer. 
                             Some examples:
                                  <PrivateBytes enabled="true" unit="percent">25</PrivateBytes>
                                  <PrivateBytes enabled="true" unit="GB">2</PrivateBytes>
                             Make sure the values are lower than the values you have set to trigger a memory event. -->
            <PrivateBytes enabled="true" unit="percent">25</PrivateBytes>
          </Baselines>
        </Snapshots>
      </MemoryEventSettings>
      <!-- Controlling which performance counters are collected by Microsoft Monitoring Agent. -->
      <PerformanceCounters enabled="true">
        <!-- Microsoft Monitoring Agent always collects a predefined set of performance counters (such as 
                     Process CPU, Network IO, Exception Rate, Performance index) for every monitored application.  
                     You can also configure the agent to collect more system or custom performance counters.

                     For example:

                          <PerformanceCounterConfiguration counterSpecifier="\Memory\Available Bytes"/>
                          <PerformanceCounterConfiguration counterSpecifier="\Processor(_Total)\% Processor Time" />
    
                     The format of the counterSpecifier is:
 
                          \PerformanceCounterCategory(Instance)\Counter 

                     Instance must be specified if the performance category is of the multi-instance type.  
 	                 Specify * to collect all instances. For example:
        	              <PerformanceCounterConfiguration counterSpecifier="\LogicalDisk(*)\Disk Reads/sec" />

                     For the following specific category instances, the Agent can discover the right instance for your web application.
                     For example:
                          <PerformanceCounterConfiguration counterSpecifier="\Process(w3wp?)\% Processor Time" />
                          <PerformanceCounterConfiguration counterSpecifier="\.NET CLR Memory(w3wp?)\% Time in GC" />
                          <PerformanceCounterConfiguration counterSpecifier="\ASP.NET Applications(?)\Request Execution Time" />
    
                     For more about performance counters: http://technet.microsoft.com/library/bb734903.aspx
                     To discover performance counters available in your machine, use 
                          System.Diagnostics.PerformanceCounterCategory.GetCategories() -->
      </PerformanceCounters>
      <VisualStudio>
        <PortalURI>https://RomBe.visualstudio.com/</PortalURI>
        <DashboardID>259e7b87-2e49-4adc-8f76-470632da62e6</DashboardID>
      </VisualStudio>
    </Defaults>
    <Profile name="Production">
      <!-- <ServerAnalytics> controls Application Insights Telemetry SDK settings. -->
      <ServerAnalytics enabled="true">
        <!-- The frequency in seconds with which the SDK uploads data to Application Insights. -->
        <DataUploadIntervalInSeconds>60</DataUploadIntervalInSeconds>
        <!-- Application Insights SDK for Services collects client data by default from the HTTP request. 
                     Set it to false to stop collecting data from the HTTP request automatically. 
                     You can still set the properties by using the ServerAnalytics.CurrentRequest object. -->
        <AutoFillClientPropertiesFromRequest>true</AutoFillClientPropertiesFromRequest>
        <!-- Application Insights SDK for Services collects the Client IP Address from the HTTP request, if available, by default. 
                     This value will be null in case of Azure worker roles or if the Client IP Address cannot be extracted. 
                     Set it to false to omit the IP address from data collected from the HTTP request. -->
        <CollectClientIPAddress>true</CollectClientIPAddress>
        <!-- Determines whether or not events will appear in raw form in the developer dashboard. It is recommended this be set
                     to true for debug builds when diagnosing your application's use of telemetry events. For deployment, it is
                     highly recommended that this value be false. -->
        <SendToRawStream>false</SendToRawStream>
        <!-- When CollectUserName is set to true, Application Insights SDK collects user name from the machine sending 
                     events. This data is only meaningful when SendToRawStream is true. -->
        <CollectUserName>false</CollectUserName>
        <!-- When CollectMachineName is set to true, Application Insights SDK collects machine name from the machine 
                     sending events. This data is only meaningful when SendToRawStream is true. -->
        <CollectMachineName>false</CollectMachineName>
      </ServerAnalytics>
    </Profile>
    <Profile name="Development">
      <ServerAnalytics enabled="true">
        <!-- The frequency in seconds with which the SDK uploads data to Application Insights. -->
        <DataUploadIntervalInSeconds>0.1</DataUploadIntervalInSeconds>
        <!-- Application Insights SDK for Services collects client data by default from the HTTP request. 
                     Set it to false to stop collecting data from the HTTP request automatically. 
                     You can still set the properties by using the ServerAnalytics.CurrentRequest object. -->
        <AutoFillClientPropertiesFromRequest>true</AutoFillClientPropertiesFromRequest>
        <!-- Application Insights SDK for Services collects the Client IP Address from the HTTP request, if available, by default. 
                     This value will be null in case of Azure worker roles or if the Client IP Address cannot be extracted. 
                     Set it to false to omit the IP address from data collected from the HTTP request. -->
        <CollectClientIPAddress>true</CollectClientIPAddress>
        <!-- Determines whether or not events will appear in raw form in the developer dashboard. It is recommended this be set
                     to true for debug builds when diagnosing your application's use of telemetry events. For deployment, it is
                     highly recommended that this value be false. -->
        <SendToRawStream>true</SendToRawStream>
        <!-- When CollectUserName is set to true, Application Insights SDK collects user name from the machine sending 
                     events. This data is only meaningful when SendToRawStream is true. -->
        <CollectUserName>true</CollectUserName>
        <!-- When CollectMachineName is set to true, Application Insights SDK collects machine name from the machine 
                     sending events. This data is only meaningful when SendToRawStream is true. -->
        <CollectMachineName>true</CollectMachineName>
      </ServerAnalytics>
    </Profile>
  </Profiles>
  <TelemetryModules>
    <Add Type="Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule, Microsoft.AI.DependencyCollector" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.PerformanceCollectorModule, Microsoft.AI.PerfCounterCollector">
      <!--
      Use the following syntax here to collect additional performance counters:
      
      <Counters>
        <Add PerformanceCounter="\Process(??APP_WIN32_PROC??)\Handle Count" ReportAs="Process handle count" />
        ...
      </Counters>
      
      PerformanceCounter must be either \CategoryName(InstanceName)\CounterName or \CategoryName\CounterName
      
      Counter names may only contain letters, round brackets, forward slashes, hyphens, underscores, spaces and dots.
      You may provide an optional ReportAs attribute which will be used as the metric name when reporting counter data.
      For the purposes of reporting, metric names will be sanitized by removing all invalid characters from the resulting metric name.
      
      NOTE: performance counters configuration will be lost upon NuGet upgrade.
      
      The following placeholders are supported as InstanceName:
        ??APP_WIN32_PROC?? - instance name of the application process  for Win32 counters.
        ??APP_W3SVC_PROC?? - instance name of the application IIS worker process for IIS/ASP.NET counters.
        ??APP_CLR_PROC?? - instance name of the application CLR process for .NET counters.
      -->
    </Add>
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule, Microsoft.ApplicationInsights" />
    <Add Type="Microsoft.ApplicationInsights.WindowsServer.DeveloperModeWithDebuggerAttachedTelemetryModule, Microsoft.AI.WindowsServer" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.RequestTrackingTelemetryModule, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.ExceptionTrackingTelemetryModule, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.DeveloperModeWithDebuggerAttachedTelemetryModule, Microsoft.ApplicationInsights.Extensibility.Web" />
  </TelemetryModules>
  <!-- 
    Learn more about Application Insights configuration with ApplicationInsights.config here: 
    http://go.microsoft.com/fwlink/?LinkID=513840
    
    Note: If not present, please add <InstrumentationKey>Your Key</InstrumentationKey> to the top of this file.
  -->
  <TelemetryInitializers>
    <Add Type="Microsoft.ApplicationInsights.WindowsServer.AzureRoleEnvironmentTelemetryInitializer, Microsoft.AI.WindowsServer" />
    <Add Type="Microsoft.ApplicationInsights.WindowsServer.DomainNameRoleInstanceTelemetryInitializer, Microsoft.AI.WindowsServer" />
    <Add Type="Microsoft.ApplicationInsights.WindowsServer.BuildInfoConfigComponentVersionTelemetryInitializer, Microsoft.AI.WindowsServer" />
    <Add Type="Microsoft.ApplicationInsights.WindowsServer.DeviceTelemetryInitializer, Microsoft.AI.WindowsServer" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.SyntheticTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.ClientIpHeaderTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.UserAgentTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.OperationNameTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.OperationIdTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.UserTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.SessionTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.AzureRoleEnvironmentTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.DomainNameRoleInstanceTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.BuildInfoConfigComponentVersionTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
    <Add Type="Microsoft.ApplicationInsights.Extensibility.Web.DeviceTelemetryInitializer, Microsoft.ApplicationInsights.Extensibility.Web" />
  </TelemetryInitializers>
  <!-- 
    Learn more about Application Insights configuration with ApplicationInsights.config here: 
    http://go.microsoft.com/fwlink/?LinkID=513840
    
    Note: If not present, please add <InstrumentationKey>Your Key</InstrumentationKey> to the top of this file.
  -->
  <!-- 
    Learn more about Application Insights configuration with ApplicationInsights.config here: 
    http://go.microsoft.com/fwlink/?LinkID=513840
    
    Note: If not present, please add <InstrumentationKey>Your Key</InstrumentationKey> to the top of this file.
  -->
  <TelemetryChannel Type="Microsoft.ApplicationInsights.Extensibility.Web.TelemetryChannel, Microsoft.ApplicationInsights.Web.TelemetryChannel" />
  <!-- 
    Learn more about Application Insights configuration with ApplicationInsights.config here: 
    http://go.microsoft.com/fwlink/?LinkID=513840
    
    Note: If not present, please add <InstrumentationKey>Your Key</InstrumentationKey> to the top of this file.
  -->
  <!-- This key is for Application Insights resource 'RomBeAdmin' in resource group 'Default-Web-EastUS2' -->
  <InstrumentationKey>02188489-b039-476a-a4dd-38cdbe74c4d2</InstrumentationKey>
</ApplicationInsights>