@model RomBe.Services.Models.ProActiveCreateModel
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainForm", name = "mainForm" }))
{
    @Html.AntiForgeryToken()
    <h1>Question</h1>
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(false)

        <div class="form-group">
            @Html.Label("Period Type", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(p => p.ProActiveInformation.PeriodTypeId, (SelectList)ViewBag.PeriodTypeId)
                @Html.ValidationMessageFor(model => model.ProActiveInformation.PeriodTypeId)
            </div>

        </div>

        <div class="form-group">
            @Html.Label("Type", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(p => p.ProActiveInformation.ProActiveTypeId, (SelectList)ViewBag.ProActiveTypeId, String.Empty)
                @Html.ValidationMessageFor(model => model.ProActiveInformation.ProActiveTypeId,"You must enter a type" )
            </div>

        </div>

        <div class="form-group">
            @Html.Label("Task Category", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(p => p.ProActiveInformation.TaskCategoryId, new List<SelectListItem>(), String.Empty)
                @Html.ValidationMessageFor(model => model.ProActiveInformation.TaskCategoryId)
                <span style="padding-left:17px;">
                    <input type="button" onclick="AddNewTaskCategory()" value="Add New Category">
                </span>
            </div>

        </div>

        <div class="form-group">
            @Html.Label("Period Min", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProActiveInformation.PeriodMin)
                @Html.ValidationMessageFor(model => model.ProActiveInformation.PeriodMin)
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Period Max", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProActiveInformation.PeriodMax)
                @Html.ValidationMessageFor(model => model.ProActiveInformation.PeriodMax)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProActiveInformation.Subject, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ProActiveInformation.Subject, new { rows = "5", cols = "100", style = "max-width:623px" })
                @Html.ValidationMessageFor(model => model.ProActiveInformation.Subject)
            </div>
        </div>
    </div>

    <h1>Answer</h1>
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(false)

        <div class="form-group">
            @Html.Label("Language", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(p => p.ProActiveInformationContent.LanguageId, (SelectList)ViewBag.LanguageId, String.Empty)
                @Html.ValidationMessageFor(model => model.ProActiveInformationContent.LanguageId)
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.ProActiveInformationContent.Title, new { @class = "control-label col-md-2" })*@
            @Html.Label("Body", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ProActiveInformationContent.Title, new { rows = "5", cols = "100", style = "max-width:623px" })
                @Html.ValidationMessageFor(model => model.ProActiveInformationContent.Title)
            </div>
        </div>

        <div class="form-group">
            @*@Html.LabelFor(model => model.ProActiveInformationContent.Information, new { @class = "control-label col-md-2" })*@
            @Html.Label("Action", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ProActiveInformationContent.Information, new { rows = "5", cols = "100", style = "max-width:623px" })
                @Html.ValidationMessageFor(model => model.ProActiveInformationContent.Information)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script type="text/javascript">

    $(function () {
        GetTaskCategoryList(false, $("#ProActiveInformation_PeriodTypeId").val());
        SetPlaceHolder();
        $("#mainForm").sisyphus({
            locationBased: true,
            autoRelease: true,
            timeout: 0
        });
    });

    $('#ProActiveInformation_PeriodTypeId').change(function () {
        GetTaskCategoryList(false, $('#ProActiveInformation_PeriodTypeId').val());
    });

    function GetTaskCategoryList(selectAdded, periodType) {

        $.ajax({
            url: "/RealTime/TaskCategoryList?periodTypeId=" + periodType,
            type: 'Post',
            dataType: 'json',
            success: function (data) {
                // clear all previous options
                $("#ProActiveInformation_TaskCategoryId > option").remove();
                var options = $('#ProActiveInformation_TaskCategoryId');

                $.each(data, function () {
                    options.append($('<option />').val(this.Value).text(this.Text));
                });

                if (selectAdded) {
                    var length = $("#ProActiveInformation_TaskCategoryId > option").length;
                    $('#ProActiveInformation_TaskCategoryId >option')[length - 1].selected = true
                }
            }
        });
    }

    function AddNewTaskCategory() {
        var periodType = $('#ProActiveInformation_PeriodTypeId').val();
        var win = window.open("../TaskCategory/CreatePopup", "_blank");
        var pollTimer = window.setInterval(function () {
            if (win.closed !== false) { // !== is required for compatibility with Opera
                window.clearInterval(pollTimer);
                GetTaskCategoryList(true, periodType);
            }
        }, 200);

    }


</script>